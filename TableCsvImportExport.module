<?php

/**
 * ProcessWire Table CSV Import / Export
 * by Adrian Jones
 *
 * Adds the ability to add rows to a Table field by importing CSV formatted content. Also adds an export button to download data from table.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class TableCsvImportExport extends WireData implements Module {

    public static function getModuleInfo() {
        return array(
            'title' => 'Table CVS Import / Export',
            'summary' => 'Adds the ability to add rows to a Table field by importing CSV formatted content. Also adds an export button to download data from table.',
            'href' => '',
            'version' => 8,
            'permanent' => false,
            'autoload' => true,
            'singular' => true,
            'requires' => 'FieldtypeTable',
            'installs' => 'ProcessTableCsvExport'
        );
    }

    public function init() {
        ini_set('auto_detect_line_endings', true);
        $this->addHookAfter('InputfieldTable::render', $this, 'addImport');
        $this->addHookAfter('InputfieldTable::processInput', $this, 'processImport');
    }

    public function addImport(HookEvent $event) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        wire("config")->scripts->add($this->config->urls->TableCsvImportExport . "TableCsvImportExport.js?v={$version}");

        $form = $this->modules->get("InputfieldForm");
        $form->method = 'post';

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'import_csv');
        $fieldset->label = __("Import CSV");
        $fieldset->description = __("The structure of the CSV must match the table fields. Import will happen on page save.");
        $fieldset->collapsed = Inputfield::collapsedYes;

        $f = $this->modules->get("InputfieldSelect");
        $f->name = 'append_overwrite';
        $f->label = __('Append or Overwrite');
        $f->description = __("Determines whether to append new rows, or overwrite all existing rows.");
        $f->required = true;
        $f->addOption("append", "Append");
        $f->addOption("overwrite", "Overwrite");
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'import_column_separator';
        $f->label = __('Columns separated with');
        $f->notes = __('For tab separated, enter: tab');
        $f->value = ',';
        $f->columnWidth = 33;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'import_column_enclosure';
        $f->label = __('Column enclosure');
        $f->value = '"';
        $f->columnWidth = 34;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'import_names_first_row';
        $f->label = __('Ignore the first row as it contains column names');
        $f->columnWidth = 33;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldTextarea");
        $f->name = 'csv_data';
        $f->label = __('Paste in CSV Data');
        $f->collapsed = Inputfield::collapsedYes;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldFile");
        $f->name = 'csv_upload';
        $f->label = __('Upload CSV File');
        $f->description = __("NOT CURRENTLY WORKING - USE PASTE OPTION INSTEAD");
        $f->extensions = 'csv txt';
        $f->maxFiles = 1;
        $f->descriptionRows = 0;
        $f->overwrite = true;
        $f->collapsed = Inputfield::collapsedYes;
        $fieldset->add($f);

        $form->add($fieldset);


        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'export_csv');
        $fieldset->label = __("Export CSV");
        $fieldset->description = __("Export the content of this table to a CSV file");
        $fieldset->collapsed = Inputfield::collapsedYes;

        $f = $this->modules->get("InputfieldText");
        $f->name = 'export_column_separator';
        $f->label = __('Columns separated with');
        $f->notes = __('For tab separated, enter: tab');
        $f->value = ',';
        $f->columnWidth = 33;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'export_column_enclosure';
        $f->label = __('Column enclosure');
        $f->value = '"';
        $f->columnWidth = 34;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'export_names_first_row';
        $f->label = __('Put column names in the first row');
        $f->attr('checked', 'checked');
        $f->columnWidth = 33;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldButton");
        $f->name = 'export_button';
        $f->value = $this->_x('Export as CSV', 'button');
        $f->attr('class', 'ui-button ui-widget ui-corner-all ui-state-default export_csv');
        $f->attr('data-adminurl', $this->pages->get(2)->name);
        $f->attr('data-pageid', (int) $this->input->id);
        $f->attr('data-fieldname', $event->object->name);
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldMarkup");
        $f->attr('name', 'iframe');
        $f->value = "<iframe id='download' src=''></iframe>";
        $fieldset->add($f);

        $form->add($fieldset);

        return $event->return .= $form->render();

    }


    public function processImport(HookEvent $event) {

        if($this->input->post->csv_data == '' && $this->input->post->csv_upload == '') return;

        $fieldName = $event->object->name;

        $p = $this->pages->get((int) $this->input->id);

        $i=0;
        foreach($p->$fieldName->columns as $subfield){
            $subfieldNames[$i] = $subfield['name']; //populate array of column/field names indexed in order so they can be used later to populate table
            $i++;
        }

        if($this->input->post->append_overwrite == 'overwrite') $p->$fieldName->removeAll();

        $rows = trim(preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "\n", $this->input->post->csv_data),"\n"); // remove any blank lines from the textarea

        $x=0;
        foreach(explode("\n",$rows) as $row){

            $x++;

            if($x==1 && $this->input->post->import_names_first_row == 1) continue; //ignore first row which contains column names

            $data = str_getcsv($row, $this->input->post->import_column_separator == "tab" ? chr(9) : $this->input->post->import_column_separator, $this->input->post->import_column_enclosure);

            $tableEntry = $p->$fieldName->makeBlankItem();

            foreach($data as $subfieldKey => $fieldValue){
                if($subfieldNames[$subfieldKey] != 'data') $tableEntry->$subfieldNames[$subfieldKey] = $fieldValue;
            }
            $p->$fieldName->add($tableEntry);
            $p->save($fieldName);

        }

    }

}
