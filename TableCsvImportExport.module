<?php

/**
 * ProcessWire Table CSV Import / Export
 * by Adrian Jones
 *
 * Processwire module for admin and front-end importing and exporting of CSV formatted content for Profields Table fields.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class TableCsvImportExport extends WireData implements Module {

    public static function getModuleInfo() {
        return array(
            'title' => 'Table CVS Import / Export',
            'summary' => 'Processwire module for admin and front-end importing and exporting of CSV formatted content for Profields Table fields.',
            'href' => 'http://modules.processwire.com/modules/table-csv-import-export/',
            'version' => 22,
            'permanent' => false,
            'autoload' => 'template=admin',
            'singular' => true,
            'requires' => 'FieldtypeTable',
            'installs' => 'ProcessTableCsvExport'
        );
    }

    public function init() {
        ini_set('auto_detect_line_endings', true);
        $this->addHookAfter('InputfieldTable::getConfigInputfields', $this, 'hookAddConfig');
        $this->addHookAfter('InputfieldTable::render', $this, 'buildForms'); // when edit enabled
        if($this->user->hasPermission("table-csv-export")) $this->addHookAfter('InputfieldTable::renderValue', $this, 'buildExportForm'); // when field locked
        if($this->user->hasPermission("table-csv-import")) $this->addHookAfter('InputfieldTable::processInput', $this, 'processImport');
        $this->addHook('Field::importCsv', $this, 'importCsv'); // not limited to table-csv-import permission because only relevant to front-end
    }


    public function hookAddConfig(HookEvent $event) {

        // get existing inputfields from getConfigInputfields
        $inputfields = $event->return;

        $f = $this->modules->get('InputfieldCheckbox');
        $f->label = __('Allow CSV Import Overwrite Option');
        $f->description = __('If checked, users will have the option to overwrite, not just append, when adding data to table via the Table CSV Import/Export module.');
        $f->attr('name', 'allow_overwrite');
        $value = $this->fields->get($event->object->name)->allow_overwrite;
        $f->attr('checked', $this->fields->get($event->object->name)->allow_overwrite ? 'checked' : '' );
        $f->collapsed = Inputfield::collapsedYes;
        $inputfields->append($f);

    }


    public function buildForms(HookEvent $event) {
        if($this->user->hasPermission("table-csv-import")) $this->buildImportForm($event);
        if($this->user->hasPermission("table-csv-export")) $this->buildExportForm($event);
    }


    public function buildImportForm(HookEvent $event) {

        $inputfields = new InputfieldWrapper();

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'import_csv');
        $fieldset->label = __("Import CSV");
        $fieldset->description = __("The structure of the CSV must match the table fields. Import will happen on page save." . ($this->fields->get($event->object->name)->allow_overwrite != 1 || !$this->user->hasPermission("table-csv-import-overwrite") ? "\nImported data will be appended to existing rows." : ""));
        $fieldset->collapsed = Inputfield::collapsedYes;

        if($this->fields->get($event->object->name)->allow_overwrite == 1 && $this->user->hasPermission("table-csv-import-overwrite")){
            $f = $this->modules->get("InputfieldSelect");
            $f->name = 'append_overwrite';
            $f->label = __('Append or Overwrite');
            $f->description = __("Determines whether to append new rows, or overwrite all existing rows.");
            $f->required = true;
            $f->addOption("append", "Append");
            $f->addOption("overwrite", "Overwrite");
            $fieldset->add($f);
        }

        $f = $this->modules->get("InputfieldText");
        $f->name = 'import_column_separator';
        $f->label = __('Columns separated with');
        $f->notes = __('For tab separated, enter: tab');
        $f->value = ',';
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'import_column_enclosure';
        $f->label = __('Column enclosure');
        $f->value = '"';
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'convert_decimals';
        $f->label = __('Convert comma decimals to dots.');
        $f->notes = __('eg. 123,45 is converted to 123.45');
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'import_names_first_row';
        $f->label = __('Ignore the first row');
        $f->notes = __('Use this if the first row is column names');
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldTextarea");
        $f->name = 'csv_data';
        $f->label = __('Paste in CSV Data');
        $f->notes = __('Be sure you match the settings above to the format of your data');
        $f->collapsed = Inputfield::collapsedYes;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldMarkup");
        $f->label = __('Upload CSV File');
        $f->attr('name', 'csv_upload');
        $f->value = "<input name='csv_file' type='file' />";
        $f->notes = __("File must have .csv, .tsv, or .txt extension\nBe sure you match the settings above to the format of your data");
        $f->collapsed = Inputfield::collapsedYes;
        $fieldset->add($f);

        $inputfields->add($fieldset);

        return $event->return .= $inputfields->render();
    }


    public function buildExportForm(HookEvent $event) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        wire("config")->scripts->add($this->config->urls->TableCsvImportExport . "TableCsvImportExport.js?v={$version}");

        $inputfields = new InputfieldWrapper();

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'export_csv');
        $fieldset->label = __("Export CSV");
        $fieldset->description = __("Export the content of this table to a CSV file");
        $fieldset->collapsed = Inputfield::collapsedYes;

        $f = $this->modules->get("InputfieldText");
        $f->name = 'export_column_separator';
        $f->label = __('Columns separated with');
        $f->notes = __('For tab separated, enter: tab');
        $f->value = ',';
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'export_column_enclosure';
        $f->label = __('Column enclosure');
        $f->value = '"';
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldText");
        $f->name = 'export_extension';
        $f->label = __('File extension');
        $f->value = 'csv';
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'export_names_first_row';
        $f->label = __('Put column names in the first row');
        $f->attr('checked', 'checked');
        $f->columnWidth = 25;
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldButton");
        $f->name = 'export_button';
        $f->value = $this->_x('Export as CSV', 'button');
        $f->attr('class', 'ui-button ui-widget ui-corner-all ui-state-default export_csv');
        $f->attr('data-pageid', (int) $this->input->id);
        $f->attr('data-fieldname', $event->object->name);
        $fieldset->add($f);

        $f = $this->modules->get("InputfieldMarkup");
        $f->attr('name', 'iframe');
        $f->value = "<iframe id='download' src=''></iframe>";
        $fieldset->add($f);

        $inputfields->add($fieldset);

        return $event->return .= $inputfields->render();
    }


    public function processImport(HookEvent $event) {

        $this->session->fieldName = $event->object->name;

        if($this->input->post->csv_data == '' && $_FILES["csv_file"]["name"] == '') return;

        //CSV file upload
        if($_FILES["csv_file"]["name"] !== ''){

            $csv_file_extension = pathinfo($_FILES["csv_file"]["name"], PATHINFO_EXTENSION);
            $csv_type = $_FILES["csv_file"]["type"];

            if(($csv_file_extension == 'csv' || $csv_file_extension == 'txt' || $csv_file_extension == 'tsv') &&
                ($csv_type == 'text/plain' || $csv_type == 'text/tab-separated-values' || $csv_type == 'text/csv')){
                $this->session->csvData = file_get_contents($_FILES["csv_file"]["tmp_name"]);
            }
            else{
                $this->error($this->_("That is not an allowed file extension for a CSV import. Try again with a .csv, .tsv, or .txt file"));
            }

            unlink($_FILES["csv_file"]["tmp_name"]);
        }

        // CSV pasted in
        if($this->input->post->csv_data != '') $this->session->csvData = $this->input->post->csv_data;

        // Import
        $this->importCsv();

    }


    public function importCsv($event = NULL){

        $csvData = !is_null($event) ? $event->arguments(0) : $this->session->csvData;
        unset($this->session->csvData);
        $delimiter = !is_null($event) ? $event->arguments(1) : $this->input->post->import_column_separator;
        $enclosure = !is_null($event) ? $event->arguments(2) : $this->input->post->import_column_enclosure;
        $convertDecimals = !is_null($event) ? $event->arguments(3) : $this->input->post->convert_decimals;
        if($convertDecimals == 1) $convertDecimals = true;
        $namesFirstRow = !is_null($event) ? $event->arguments(4) : $this->input->post->import_names_first_row;
        if($namesFirstRow == 'checked') $namesFirstRow = true;
        $overwrite = !is_null($event) ? $event->arguments(5) : $this->input->post->append_overwrite;

        $p = !is_null($event) ? $event->object->page : $this->pages->get((int) $this->input->get->id);
        $p->of(false);
        $fieldName = !is_null($event) ? $event->object->name : $this->session->fieldName;

        if($overwrite == 'overwrite') $p->$fieldName->removeAll();

        $rows = trim(preg_replace("/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/", "\n", $csvData),"\n"); // remove any blank lines from the textarea

        $i=0;
        foreach($p->$fieldName->columns as $subfield){
            $subfieldNames[$i] = $subfield['name']; //populate array of column/field names indexed in order so they can be used later to populate table
            $i++;
        }

        $x=0;
        foreach(explode("\n",$rows) as $row){

            $x++;

            if($x==1 && $namesFirstRow == true) continue; //ignore first row which contains column names

            $data = str_getcsv($row, $delimiter == "tab" ? chr(9) : $delimiter, $enclosure);

            $tableEntry = $p->$fieldName->makeBlankItem();

            foreach($data as $subfieldKey => $fieldValue){
                $tableEntry->$subfieldNames[$subfieldKey] = $convertDecimals == true ? $this->convertDecimals($fieldValue) : $fieldValue;
            }

            $p->$fieldName->add($tableEntry);
            $p->save($fieldName);

        }

    }


    public function convertDecimals($value){
        // is the first character a number ?
        if(ctype_digit(substr($value, 0, 1))) {
            // 123,45 -> $match[0] else match is NULL
            preg_match('/^\d+,\d+$/', $value, $match);
            // if 123,45 convert it to 123.45,
            return count($match) && $match[0] ? str_replace(',', '.', $match[0]) : $value;
        }
        else{
            return $value;
        }
    }


    /**
     * Called only when your module is installed
     *
     * Create a new permission.
     *
     */
    public function ___install() {
        $permission = $this->permissions->get('table-csv-import');
        if (!$permission->id) {
            $p = new Permission();
            $p->name = 'table-csv-import';
            $p->title = $this->_('Access to Table CSV Import');
            $p->save();
            // tell the user we created this module's permission
            $this->message($this->_("Created New Permission: table-csv-import"));
            $this->message($this->_("Assigned table-csv-import permission to superuser"));
        }

        $permission = $this->permissions->get('table-csv-import-overwrite');
        if (!$permission->id) {
            $p = new Permission();
            $p->name = 'table-csv-import-overwrite';
            $p->title = $this->_('Access to choose overwrite option when using Table CSV Import');
            $p->save();
            // tell the user we created this module's permission
            $this->message($this->_("Created New Permission: table-csv-import-overwrite"));
            $this->message($this->_("Assigned table-csv-import-overwrite permission to superuser"));
        }

        $permission = $this->permissions->get('table-csv-export');
        if (!$permission->id) {
            $p = new Permission();
            $p->name = 'table-csv-export';
            $p->title = $this->_('Access to Table CSV Export');
            $p->save();
            // tell the user we created this module's permission
            $this->message($this->_("Created New Permission: table-csv-export"));
            $this->message($this->_("Assigned table-csv-export permission to superuser"));
        }

        $su = $this->roles->get("superuser");
        $su->addPermission("table-csv-import");
        $su->addPermission("table-csv-import-overwrite");
        $su->addPermission("table-csv-export");
        $su->save();
    }

    /**
     * Called only when your module is uninstalled
     *
     * Remove the special permission
     *
     */
    public function ___uninstall() {
        $permission = $this->permissions->get('table-csv-import');
        if ($permission->id) {
            $permission->delete();
            $this->message($this->_("Deleted Permission: table-csv-import"));
        }
        $permission = $this->permissions->get('table-csv-export');
        if ($permission->id) {
            $permission->delete();
            $this->message($this->_("Deleted Permission: table-csv-export"));
        }
    }



}
