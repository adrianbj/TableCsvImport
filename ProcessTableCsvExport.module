<?php

/**
 * ProcessWire Table CSV Export Helper
 * by Adrian Jones
 *
 * Helper process module for generating CSV from a Table field
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessTableCsvExport extends Process implements Module {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Process Table CSV Export'),
            'version' => 45,
            'summary' => __('Helper module for creating CSV to export'),
            'author' => 'Adrian Jones',
            'href' => 'http://modules.processwire.com/modules/table-csv-import-export/',
            'singular' => true,
            'autoload' => false,
            'permission' => 'table-csv-export',
            'requires' => 'TableCsvImportExport'
            );
    }

    /**
     * Name used for the page created in the admin
     *
     */
    const adminPageName = 'table-csv-export';



    /**
     * Initialize the module
     *
     */
    public function init() {
        parent::init();
        $this->addHook('Field::exportCsv', $this, 'exportCsv'); // not limited to table-csv-export permission because only relevant to front-end
    }

    /**
     * Executed when root url for module is accessed
     *
     */
    public function ___execute() {
        $this->exportCsv();
    }


    public function outputCSV($data, $delimiter, $enclosure) {
        $output = fopen("php://output", "w");
        foreach ($data as $row) {
            fputcsv($output, $row, $delimiter == "tab" ? chr(9) : $delimiter, $enclosure);
        }
        fclose($output);
    }


    public function exportCsv($event = NULL) {
        $delimiter = !is_null($event) ? $event->arguments(0) : wire('input')->get->cs;
        $enclosure = !is_null($event) ? $event->arguments(1) : wire('input')->get->ce;
        $extension = !is_null($event) ? $event->arguments(2) : wire('input')->get->ext;
        $multipleValuesSeparator = !is_null($event) ? $event->arguments(3) : wire('input')->get->mvs;
        if($multipleValuesSeparator == '\r') $multipleValuesSeparator = chr(13);
        if($multipleValuesSeparator == '\n') $multipleValuesSeparator = chr(10);
        $namesFirstRow = !is_null($event) ? $event->arguments(4) : wire('input')->get->nfr;
        $columnsToExport = !is_null($event) ? $event->arguments(5) : wire('input')->get->cte;
        $namesFirstRow = $namesFirstRow == 'checked' ? true : false;

        $fieldName = !is_null($event) ? $event->object->name : wire('input')->get->fn;
        //actual field name is never mangled with a repeater extension
        $actualFieldName = (strpos($fieldName, '_repeater') !== FALSE) ? strstr($fieldName, '_repeater', true) : $fieldName;

        //get actual page, considering it might be a repeater
        if($actualFieldName != $fieldName) $repeaterId = str_replace($actualFieldName . '_repeater', '', $fieldName);
        if(isset($repeaterId)) {
            $p = $this->pages->get($repeaterId);
        }
        else {
            $p = !is_null($event) ? $event->object->page : wire('pages')->get((int)wire('input')->get->pid);
        }

        $p->of(false);
        // needs to be before of(true), otherwise it returns 0
        $totalRows = $p->$actualFieldName->getTotal();

        $p->of(true); //needed to have dates etc formatted in the CSV

        $csv = array();

        $rows = $p->$actualFieldName(wire('input')->get->filter."limit=".$totalRows);
        $columns = $rows->getColumns();
        $columnsToExport = explode(",",$columnsToExport);
        foreach($columnsToExport as $key => $val) {
            $orderedColumns[$key] = $columns[$val];
        }

        $i=0;
        foreach($rows as $row){
            if($i==0 && $namesFirstRow == true){
                foreach($orderedColumns as $colKey => $col) {
                    if(!$col['name']) continue;
                    $csv[$i][] = $col['name'];
                }
            }

            $i++;
            foreach($orderedColumns as $colKey => $col) {
                if(!$col['name']) continue;
                $value = $row->{$col['name']};
                $fieldType = $col['type'];

                if($fieldType == 'pageSelect' || $fieldType == 'pageRadios') {
                    $value = wire('pages')->get($value->id)->title;
                }
                elseif($fieldType == 'pageSelectMultiple' || $fieldType == 'pageAsmSelect' || $fieldType == 'pageCheckboxes') {
                    $pageTitles = array();
                    foreach(explode('|', $value) as $v) {
                        $pageTitles[] = wire('pages')->get($v)->title;
                    }
                    $value = implode($multipleValuesSeparator, $pageTitles);
                }
                elseif($fieldType == 'selectMultiple') {
                    $value = implode($multipleValuesSeparator, $value);
                }
                $csv[$i][] = $value;
            }
        }

        header("Content-type: text/csv");
        header("Content-Disposition: attachment; filename=".$actualFieldName .".".$extension);
        header("Pragma: no-cache");
        header("Expires: 0");

        $this->outputCSV($csv, $delimiter, $enclosure);
        exit;

    }



    /**
     * Install the module and create the page where it lives
     *
     */
    public function ___install() {

        $page = $this->getInstalledPage();
        $this->message("Installed to {$page->path}");

    }

    /**
     * Return the page that this Process is installed on
     *
     */
    protected function getInstalledPage() {

        $parent = $this->pages->get("name=page,parent=".$this->config->adminRootPageID);
        $page = $parent->child("name=" . self::adminPageName);

        if(!$page->id) {
            $page = new Page();
            $page->template = 'admin';
            $page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
            $page->title = 'Table CSV Export';
            $page->name = self::adminPageName;
            $page->process = $this;
            $page->status = Page::statusHidden;
            $page->save();
        }

        return $page;
    }

    /**
     * Uninstall the module
     *
     */
    public function ___uninstall() {
        $moduleID = $this->modules->getModuleID($this);
        $page = $this->pages->get("template=admin, process=$moduleID, name=" . self::adminPageName);
        if($page->id) {
            $this->message("Removed {$page->path}");
            $this->pages->delete($page);
        }
    }


}
